// Generated by CoffeeScript 1.7.1
(function() {
  (function($, window, document) {
    'use strict';
    var Navobile, defaults, pluginName;
    Navobile = function(element, args) {
      this._name = pluginName;
      this.methods = {
        destroy: (function(_this) {
          return function() {
            return _this.destroy();
          };
        })(this)
      };
      return this.init(element, args);
    };
    pluginName = "navobile";
    defaults = {
      cta: '#show-navigation',
      clickCatch: true,
      content: '#content',
      direction: 'ltr',
      easing: 'linear',
      changeDOM: false,
      copyBoundEvents: false,
      bindSwipe: false,
      bindDrag: false,
      openOffset: '80%',
      hammerOptions: {}
    };
    $.extend(Navobile.prototype, {
      init: function(element, args) {
        if ($('body').hasClass('navobile-bound')) {
          return;
        }
        $('body').addClass('navobile-bound');
        this.elem = element;
        this.$elem = $(this.elem);
        this.settings = $.extend({}, defaults, args);
        this._defaults = defaults;
        this.$cta = $(this.settings.cta);
        this.$content = $(this.settings.content);
        this.$nav = this.settings.changeDOM ? this.$elem.clone(this.settings.copyBoundEvents) : this.$elem;
        this.createNewElems();
        if (this.settings.changeDOM) {
          this.cloneDom();
        }
        this.$content.addClass("navobile-content navobile-content--" + this.settings.direction);
        this.attach();
        this.$nav.addClass("navobile-navigation navobile-navigation--" + this.settings.direction);
        return this;
      },
      attach: function() {
        var hammerObject, interaction;
        this.$elem.data({
          open: false
        });
        this.$content.data({
          drag: false
        });
        interaction = $('html').hasClass('touch') ? 'touchend' : 'click';
        this.bindTap("" + interaction + ".navobile");
        if (this.settings.clickCatch) {
          this.bindClickCatch("" + interaction + ".navobile");
        }
        if (typeof Hammer === 'function' && (this.settings.bindSwipe || this.settings.bindDrag)) {
          hammerObject = Hammer(this.$content, this.settings.hammerOptions);
          if (this.settings.bindSwipe) {
            this.bindSwipe();
          }
          if (this.settings.bindDrag) {
            return this.bindDrag();
          }
        }
      },
      bindClickCatch: function(type) {
        this.$content.on('scroll.navobile touchdrag.navobile touchmove.navobile', (function(_this) {
          return function(e) {
            if ($('#navobile-click-catch').not(':visible')) {
              return;
            }
            e.preventDefault();
            return e.stopPropagation();
          };
        })(this));
        this.$content.parent().on('scroll.navobile touchdrag.navobile touchmove.navobile', (function(_this) {
          return function(e) {
            if ($('#navobile-click-catch').not(':visible')) {
              return;
            }
            e.preventDefault();
            return e.stopPropagation();
          };
        })(this));
        $('#navobile-click-catch').on('scroll.navobile touchdrag.navobile touchmove.navobile', (function(_this) {
          return function(e) {
            e.preventDefault();
            return e.stopPropagation();
          };
        })(this));
        return $('#navobile-click-catch').on(type, (function(_this) {
          return function(e) {
            e.preventDefault();
            e.stopPropagation();
            if (!_this.isMobile()) {
              return false;
            }
            _this.slideContentIn();
            return false;
          };
        })(this));
      },
      bindTap: function(type) {
        return this.$cta.on(type, (function(_this) {
          return function(e) {
            e.preventDefault();
            e.stopPropagation();
            if (!_this.isMobile() && !_this.settings.clickCatch) {
              return false;
            }
            if (_this.$nav.data('open') && !_this.settings.clickCatch) {
              _this.slideContentIn();
            } else {
              _this.slideContentOut();
            }
            return false;
          };
        })(this));
      },
      bindSwipe: function() {
        var in_gesture, out_gesture;
        in_gesture = this.showOnRight() ? 'right' : 'left';
        out_gesture = this.showOnRight() ? 'left' : 'right';
        this.$content.on("swipe" + in_gesture + ".navobile", (function(_this) {
          return function(e) {
            if (!_this.isMobile()) {
              return false;
            }
            if (_this.$content.data('drag')) {
              _this.removeInlineStyles();
              _this.$content.data('drag', false);
            }
            _this.slideContentIn();
            e.gesture.preventDefault();
            return e.stopPropagation();
          };
        })(this));
        return this.$content.on("swipe" + out_gesture + ".navobile", (function(_this) {
          return function(e) {
            if (!_this.isMobile()) {
              return false;
            }
            if (_this.$content.data('drag')) {
              _this.removeInlineStyles();
              _this.$content.data('drag', false);
            }
            _this.slideContentOut();
            e.gesture.preventDefault();
            return e.stopPropagation();
          };
        })(this));
      },
      bindDrag: function() {
        var in_gesture, out_gesture;
        in_gesture = this.showOnRight() ? 'right' : 'left';
        out_gesture = this.showOnRight() ? 'left' : 'right';
        return this.$content.on('dragstart.navobile drag.navobile dragend.navobile release.navobile', (function(_this) {
          return function(e) {
            var posX, translateX;
            if (!_this.isMobile()) {
              return false;
            }
            if (e.type === 'release') {
              _this.removeInlineStyles();
              return false;
            }
            if (e.direction === in_gesture) {
              if (!_this.$content.hasClass('navobile-content-hidden')) {
                return false;
              } else {
                _this.slideContentIn();
              }
            }
            if (e.direction === out_gesture) {
              if (e.type === 'dragend') {
                if (e.distance > 60) {
                  _this.slideContentOut();
                } else {
                  _this.slideContentIn();
                }
                _this.removeInlineStyles();
                return false;
              }
              if (e.type === 'dragstart') {
                _this.$content.data('drag', true);
              }
              posX = e.position.x;
              translateX = Math.ceil(_this.calculateTranslate(posX));
              if (translateX > 80 || translateX < 0) {
                return false;
              }
              if ($('html').hasClass('csstransforms3d')) {
                return _this.$content.css('transform', "translate3d(" + translateX + "%, 0, 0)");
              } else if ($('html').hasClass('csstransforms')) {
                return _this.$content.css('transform', "translateX(" + translateX + "%)");
              }
            }
          };
        })(this));
      },
      destroy: function() {
        $('#navobile-click-catch').off('.navobile');
        this.$content.off('.navobile');
        this.$content.parent().off('.navobile');
        this.$nav.addClass("navobile-navigation navobile-navigation--" + this.settings.direction);
        this.$content.removeClass("navobile-content navobile-content--" + this.settings.direction);
        if (this.settings.changeDOM) {
          return this.destroyDom();
        }
      },
      destroyDom: function() {
        this.$elem.removeClass('navobile-desktop-only');
        this.$nav.remove();
        if (this.settings.clickCatch) {
          $('#navobile-click-catch').remove();
        }
        return $('#navobile-device-pixel').remove();
      },
      animateContent: function(percent) {
        var dir_anime;
        if (!this.canUseCssTransforms()) {
          dir_anime = this.showOnRight() ? {
            right: percent
          } : {
            left: percent
          };
          this.$content.animate(dir_anime, 100, this.settings.easing, (function(_this) {
            return function() {
              var eventName;
              eventName = percent === '0%' ? 'closed' : 'opened';
              return _this.triggerEvent(eventName);
            };
          })(this));
        } else {
          if (percent === '0%') {
            this.transitionEndEvents('closed');
            this.$content.removeClass('navobile-content-hidden');
          } else {
            this.transitionEndEvents('opened');
            this.$content.addClass('navobile-content-hidden');
          }
        }
        if (percent === '0%') {
          this.$nav.removeClass('navobile-navigation-visible');
        } else {
          this.$nav.addClass('navobile-navigation-visible');
        }
        return this.removeInlineStyles();
      },
      slideContentIn: function() {
        this.triggerEvent('close');
        this.$nav.data('open', false);
        return this.animateContent('0%');
      },
      slideContentOut: function() {
        this.triggerEvent('open');
        this.$nav.data('open', true);
        return this.animateContent(this.settings.openOffset);
      },
      clickCatchHtml: function() {
        return "<div id=\"navobile-click-catch\"></div>";
      },
      cloneDom: function() {
        this.$elem.addClass('navobile-desktop-only');
        this.$nav.addClass('navobile-mobile-only');
        this.originalId = "navobile-" + (this.$nav.attr('id'));
        this.$nav.attr('id', this.originalId);
        return this.$content.before(this.$nav);
      },
      createNewElems: function() {
        if ($('#navobile-device-pixel').length === 0) {
          $('body').append('<div id="navobile-device-pixel" />');
        }
        if (this.settings.clickCatch) {
          return this.$content.prepend(this.clickCatchHtml());
        }
      },
      showOnRight: function() {
        return this.settings.direction === 'rtl';
      },
      canUseCssTransforms: function() {
        return $('html').hasClass('csstransforms3d') || $('html').hasClass('csstransforms');
      },
      calculateTranslate: function(posX) {
        return (posX / $(document).width()) * 100;
      },
      isMobile: function() {
        return $('#navobile-device-pixel').width() > 0;
      },
      removeInlineStyles: function() {
        return this.$content.css('transform', '');
      },
      triggerEvent: function(eventName) {
        return $(document).trigger("navobile:" + eventName);
      },
      transitionEndEvents: function(eventName) {
        return this.$content.one('webkitTransitionEnd oTransitionEnd otransitionend transitionend msTransitionEnd', (function(_this) {
          return function() {
            return _this.triggerEvent(eventName);
          };
        })(this));
      }
    });
    $.fn[pluginName] = function(args) {
      this.each(function() {
        if (!$.data(this, "plugin_" + pluginName) && (typeof args === "object" || !args)) {
          return $.data(this, "plugin_" + pluginName, new Navobile(this, args));
        } else if ($.data(this, "plugin_" + pluginName)) {
          if ($.data(this, "plugin_" + pluginName).methods[args]) {
            return $.data(this, "plugin_" + pluginName).methods[args].apply(this, Array.prototype.slice.call(args, 1));
          } else {
            return $.error("Method " + args + " does not exist on jQuery." + pluginName);
          }
        }
      });
      return this;
    };
  })(jQuery, window, document);

}).call(this);
